name: workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read
  actions: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: 8.0.x

    - name: Generate GitHub App Token
      id: generate_token
      uses: tibdex/github-app-token@v2
      with:
        app_id: ${{ secrets.GH_APP_ID }}
        private_key: ${{ secrets.GH_APP_PRIVATE_KEY }}
        
    - name: Debug GitHub App Token
      run: |
        TOKEN="${{ steps.generate_token.outputs.token }}"
        if [[ -z "$TOKEN" ]]; then
          echo "‚ùå Token is empty! Something went wrong."
          exit 1
        else
          echo "‚úÖ Token generated successfully!"
        fi       
        
    - name: Verify GitHub App Token with NuGet Packages
      run: |
        echo "üîç Checking if token can access NuGet packages..."
        RESPONSE=$(curl -s -H "Authorization: Bearer ${{ steps.generate_token.outputs.token }}" \
                          -H "Accept: application/vnd.github.v3+json" \
                          "https://api.github.com/users/garethbirduk/packages?package_type=nuget")
        echo "GitHub API Response: $RESPONSE"

        if echo "$RESPONSE" | grep -q '"message": "Requires authentication"'; then
          echo "‚ùå Token authentication failed! Check token scopes."
          exit 1
        elif echo "$RESPONSE" | grep -q '"message": "Not Found"'; then
          echo "‚ùå No packages found! Check if your package is public or private."
          exit 1
        else
          echo "‚úÖ Token is working correctly!"
        fi
        
    - name: Authenticate NuGet Source
      run: |
        dotnet nuget remove source github || true
        dotnet nuget add source --username "x-access-token" --password "${{ steps.generate_token.outputs.token }}" \
        --store-password-in-clear-text --name github "https://nuget.pkg.github.com/garethbirduk/index.json"

    - name: Restore dependencies
      run: dotnet restore

    - name: Debug NuGet Sources
      run: dotnet nuget list source

    - name: Test NuGet Package Fetching
      run: dotnet list package --source github

    - name: Build
      run: dotnet build --no-restore --configuration Release
    
    - name: Install modules
      run: yarn --prefer-offline

    - name: Test and generate coverage report
      run: |
        dotnet test --configuration Release --no-build GoogleLibrary.Test/GoogleLibrary.Test.csproj /p:CollectCoverage=true /p:CoverletOutputFormat="opencover" --verbosity normal
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator "-reports:GoogleLibrary.Test/coverage.opencover.xml" "-targetdir:./coverage/" "-reporttypes:Badges;Html;TextSummary"

    - name: Upload Test Coverage Report
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: ./coverage/

    - name: Deploy to GitHub Pages
      id: deployment
      if: github.ref == 'refs/heads/main'
      uses: actions/deploy-pages@v1
            
    - name: Create Test Coverage Badge
      uses: simon-k/dotnet-code-coverage-badge@v1.0.0
      id: create_coverage_badge
      if: github.ref == 'refs/heads/main'
      with:
        label: Unit Test Coverage
        color: brightgreen
        path: ./GoogleLibrary.Test/coverage.opencover.xml
        gist-filename: code-coverage.json
        gist-id: a2dad97892401a59b47ed06b9e80a86f
        gist-auth-token: ${{ secrets.GIST_AUTH_TOKEN }}       

    - name: Print badge data
      if: github.ref == 'refs/heads/main'    
      run: echo "Badge data ${{steps.test_step.outputs.badge}}"

    - name: Nuget deploy Packages
      if: github.ref == 'refs/heads/main'
      run: |
        dotnet nuget push ./GoogleLibrary/bin/Release/**/*.nupkg --source "github" --api-key ${{ secrets.GH_APIKEY }} --skip-duplicate
        dotnet nuget push ./GoogleServices/bin/Release/**/*.nupkg --source "gi
